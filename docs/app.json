[{"name":"app.R","content":"library(plotly)\nlibrary(shiny)\nlibrary(data.table)\nlibrary(magrittr)\nlibrary(igraph)\n\n#setwd(\"~/CAA/code/DeFi_network/\")\n\n# read input data\nprotocol_tree <- read.csv(\"../data/protocol_tree.csv\", sep = \";\", dec =\",\", stringsAsFactors = FALSE) %>% as.data.table() %>%  .[, X := NULL] %>% .[order(ids)]   %>% head(1000)\n\n## do-preprocessing to add \"middle layer\"\nmiddle_layer <- protocol_tree[!is.na(parents) &\n    (sapply(ids, function(s){length(strsplit(x=s,split = \"_\")[[1]])}) != \n    sapply(parents, function(s){length(strsplit(x=s,split = \"_\")[[1]])})+1) ] \nprotocol_tree[(ids %in% middle_layer$ids),\n              parents := sapply(ids, function(s){\n                  sp <- strsplit(x=s,split = \"_\")[[1]]; \n                  paste(head(sp,max(length(sp)-1,1)),collapse = \"_\")\n                  })]\nmiddle_layer[, ids := sapply(ids, function(s){\n    sp <- strsplit(x=s,split = \"_\")[[1]]; \n    paste(head(sp,max(length(sp)-1,1)),collapse = \"_\")\n    })]\nmiddle_layer[, labels := sapply(ids, function(s){\n    sp <- strsplit(x=s,split = \"_\")[[1]]; \n    tail(sp,1)\n})]\nmiddle_layer <- middle_layer[, .(values = sum(values)), .(labels, ids, parents, ext_protocol)]\n\n# merge original data with middle layer\nprotocol_tree <- rbindlist(list(protocol_tree, middle_layer))\n\n# aggregate\nprotocol_tree %<>% .[, .(values = sum(values)), .(ids,labels,parents, protocol = ext_protocol)]\n\n# define unique values for the input-selection\np <- unique(protocol_tree[is.na(parents), as.character(ids)])\n\n#for reference, see https://plotly.com/r/treemaps/#nested-layers-in-treemap\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"DeFi Composition Demo-App\"),\n    \n    fluidRow(\n        \n        hr(),\n        \n        column(12,\n           wellPanel(\n            selectInput(inputId = \"protocol\", label = strong(\"Select protocol to get building-block structure\"),choices = p, selected = p[0]),\n            plotlyOutput('plot')\n           )\n        )\n    )\n)\n\n\n\nserver <- function(input, output) {\n    \n\n    output$plot <- renderPlotly({\n        \n        protocol_tree_red <- protocol_tree[protocol == input$protocol]\n        \n        fig <- plot_ly(\n            type='treemap',\n            ids=protocol_tree_red$ids,\n            labels=protocol_tree_red$labels,\n            parents=protocol_tree_red$parents,\n            values=protocol_tree_red$values,\n            hoverinfo=\"label\",\n            textfont = list(color = \"black\", size = 20))\n        \n    \n        \n    })\n\n}\n# Run the application \nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"requirements.txt","content":"plotly\ndata.table\nmagrittr\nigraph\n","type":"text"}]
